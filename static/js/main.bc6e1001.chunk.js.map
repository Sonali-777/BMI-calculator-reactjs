{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","height","setHeight","weight","setWeight","bmi","setBMI","status","setStatus","range","setRange","getStatus","getRange","className","type","value","onChange","e","target","onClick","Number","toFixed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAqEeA,MAlEf,WACE,MAA4BC,mBAAS,MAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA4BF,mBAAS,MAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAsBJ,mBAAS,MAA/B,mBAAOK,EAAP,KAAYC,EAAZ,KACA,EAA4BN,mBAAS,IAArC,mBAAOO,EAAP,KAAeC,EAAf,KACA,EAA0BR,mBAAS,IAAnC,mBAAOS,EAAP,KAAcC,EAAd,KAaMC,EAAY,SAACN,GACjB,OAAIA,EAAM,KAAa,+BACdA,EAAM,MAAQA,EAAM,KAAa,kCACjCA,EAAM,MAAQA,EAAM,KAAa,8BAC9B,2BAERO,EAAW,SAACT,GAChB,OAAIA,EAAS,GAAW,gDACfA,EAAS,IAAMA,EAAS,GACxB,iDACAA,EAAS,GACT,kDACG,2CAGd,OACE,qBAAKU,UAAU,MAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,qBAAKA,UAAU,SAAf,SACE,kDAEF,sBAAKA,UAAU,UAAf,UACE,iCACE,6DACA,uBACEC,KAAK,OACLC,MAAOd,EACPe,SAAU,SAACC,GAAD,OAAOf,EAAUe,EAAEC,OAAOH,UAEtC,6DACA,uBACED,KAAK,OACLC,MAAOZ,EACPa,SAAU,SAACC,GAAD,OAAOb,EAAUa,EAAEC,OAAOH,aAGxC,wBAAQD,KAAK,SAASK,QA/CT,WACnB,IAAId,EAAMe,OAAOjB,EAAM,SAAIF,EAAS,IAAQ,IAAGoB,QAAQ,GACvDf,EAAO,eAAiBD,GAExB,IAAIE,EAASI,EAAUN,GACvBG,EAAUD,GACVL,EAAU,IACVE,EAAU,IACV,IAAIK,EAAQG,EAAST,GACrBO,EAASD,IAsCH,oBAGA,kCAAKJ,KACL,4BAAII,IACJ,4BAAIF,aClDCe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.bc6e1001.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [height, setHeight] = useState(null);\n  const [weight, setWeight] = useState(null);\n  const [bmi, setBMI] = useState(null);\n  const [status, setStatus] = useState(\"\");\n  const [range, setRange] = useState(\"\");\n\n  const calculateBMI = () => {\n    let bmi = Number(weight / (height / 100) ** 2).toFixed(2);\n    setBMI(\"Your BMI is \" + bmi);\n\n    let status = getStatus(bmi);\n    setStatus(status);\n    setHeight(\"\");\n    setWeight(\"\");\n    let range = getRange(weight);\n    setRange(range);\n  };\n  const getStatus = (bmi) => {\n    if (bmi < 18.5) return \"you are in underweight range\";\n    else if (bmi > 18.4 && bmi < 24.9) return \"you are in healthy weight range\";\n    else if (bmi > 24.8 && bmi < 29.9) return \"you are in overweight range\";\n    else return \" You are in obese range\";\n  };\n  const getRange = (weight) => {\n    if (weight < 50) return \"Your suggested weight range is between 1 - 49\";\n    else if (weight > 49 && weight < 68)\n      return \"Your suggested weight range is between 50 - 67\";\n    else if (weight > 68)\n      return \"Your suggested weight range is between 69 - 100\";\n    else return \"Your suggested weight is more than 100.\";\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"BMI-calculator\">\n        <div className=\"header\">\n          <h2>BMI CALCULATOR</h2>\n        </div>\n        <div className=\"content\">\n          <form>\n            <label>Enter your height in cm:</label>\n            <input\n              type=\"text\"\n              value={height}\n              onChange={(e) => setHeight(e.target.value)}\n            />\n            <label>Enter your weight in kg:</label>\n            <input\n              type=\"text\"\n              value={weight}\n              onChange={(e) => setWeight(e.target.value)}\n            />\n          </form>\n          <button type=\"button\" onClick={calculateBMI}>\n            Submit\n          </button>\n          <p> {bmi}</p>\n          <p>{range}</p>\n          <p>{status}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}